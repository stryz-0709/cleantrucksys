// Generated by view binder compiler. Do not edit!
package com.aasolution.cleantrucksys.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.RelativeLayout;
import android.widget.ToggleButton;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.aasolution.cleantrucksys.R;
import com.github.anastr.speedviewlib.SpeedView;
import com.github.angads25.toggle.widget.LabeledSwitch;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentManualBinding implements ViewBinding {
  @NonNull
  private final FrameLayout rootView;

  @NonNull
  public final ToggleButton armDownButton;

  @NonNull
  public final ToggleButton armUpButton;

  @NonNull
  public final RelativeLayout homeButton;

  @NonNull
  public final RelativeLayout manualBody;

  @NonNull
  public final RelativeLayout manualTitle;

  @NonNull
  public final ToggleButton pipeDownButton;

  @NonNull
  public final ToggleButton pipeUpButton;

  @NonNull
  public final ToggleButton robotBackwardButton;

  @NonNull
  public final ToggleButton robotForwardButton;

  @NonNull
  public final ToggleButton robotStopButton;

  @NonNull
  public final ToggleButton tankInButton;

  @NonNull
  public final ToggleButton tankOutButton;

  @NonNull
  public final ToggleButton tankStopButton;

  @NonNull
  public final LabeledSwitch vacuumButton;

  @NonNull
  public final ToggleButton vacuumInButton;

  @NonNull
  public final ToggleButton vacuumOutButton;

  @NonNull
  public final SpeedView vacuumPressureGauge;

  @NonNull
  public final ToggleButton vacuumStopButton;

  @NonNull
  public final LabeledSwitch waterButton;

  @NonNull
  public final ToggleButton waterInButton;

  @NonNull
  public final ToggleButton waterOutButton;

  @NonNull
  public final SpeedView waterPressureGauge;

  @NonNull
  public final ToggleButton waterStopButton;

  private FragmentManualBinding(@NonNull FrameLayout rootView, @NonNull ToggleButton armDownButton,
      @NonNull ToggleButton armUpButton, @NonNull RelativeLayout homeButton,
      @NonNull RelativeLayout manualBody, @NonNull RelativeLayout manualTitle,
      @NonNull ToggleButton pipeDownButton, @NonNull ToggleButton pipeUpButton,
      @NonNull ToggleButton robotBackwardButton, @NonNull ToggleButton robotForwardButton,
      @NonNull ToggleButton robotStopButton, @NonNull ToggleButton tankInButton,
      @NonNull ToggleButton tankOutButton, @NonNull ToggleButton tankStopButton,
      @NonNull LabeledSwitch vacuumButton, @NonNull ToggleButton vacuumInButton,
      @NonNull ToggleButton vacuumOutButton, @NonNull SpeedView vacuumPressureGauge,
      @NonNull ToggleButton vacuumStopButton, @NonNull LabeledSwitch waterButton,
      @NonNull ToggleButton waterInButton, @NonNull ToggleButton waterOutButton,
      @NonNull SpeedView waterPressureGauge, @NonNull ToggleButton waterStopButton) {
    this.rootView = rootView;
    this.armDownButton = armDownButton;
    this.armUpButton = armUpButton;
    this.homeButton = homeButton;
    this.manualBody = manualBody;
    this.manualTitle = manualTitle;
    this.pipeDownButton = pipeDownButton;
    this.pipeUpButton = pipeUpButton;
    this.robotBackwardButton = robotBackwardButton;
    this.robotForwardButton = robotForwardButton;
    this.robotStopButton = robotStopButton;
    this.tankInButton = tankInButton;
    this.tankOutButton = tankOutButton;
    this.tankStopButton = tankStopButton;
    this.vacuumButton = vacuumButton;
    this.vacuumInButton = vacuumInButton;
    this.vacuumOutButton = vacuumOutButton;
    this.vacuumPressureGauge = vacuumPressureGauge;
    this.vacuumStopButton = vacuumStopButton;
    this.waterButton = waterButton;
    this.waterInButton = waterInButton;
    this.waterOutButton = waterOutButton;
    this.waterPressureGauge = waterPressureGauge;
    this.waterStopButton = waterStopButton;
  }

  @Override
  @NonNull
  public FrameLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentManualBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentManualBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_manual, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentManualBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.arm_down_button;
      ToggleButton armDownButton = ViewBindings.findChildViewById(rootView, id);
      if (armDownButton == null) {
        break missingId;
      }

      id = R.id.arm_up_button;
      ToggleButton armUpButton = ViewBindings.findChildViewById(rootView, id);
      if (armUpButton == null) {
        break missingId;
      }

      id = R.id.homeButton;
      RelativeLayout homeButton = ViewBindings.findChildViewById(rootView, id);
      if (homeButton == null) {
        break missingId;
      }

      id = R.id.manual_body;
      RelativeLayout manualBody = ViewBindings.findChildViewById(rootView, id);
      if (manualBody == null) {
        break missingId;
      }

      id = R.id.manual_title;
      RelativeLayout manualTitle = ViewBindings.findChildViewById(rootView, id);
      if (manualTitle == null) {
        break missingId;
      }

      id = R.id.pipe_down_button;
      ToggleButton pipeDownButton = ViewBindings.findChildViewById(rootView, id);
      if (pipeDownButton == null) {
        break missingId;
      }

      id = R.id.pipe_up_button;
      ToggleButton pipeUpButton = ViewBindings.findChildViewById(rootView, id);
      if (pipeUpButton == null) {
        break missingId;
      }

      id = R.id.robot_backward_button;
      ToggleButton robotBackwardButton = ViewBindings.findChildViewById(rootView, id);
      if (robotBackwardButton == null) {
        break missingId;
      }

      id = R.id.robot_forward_button;
      ToggleButton robotForwardButton = ViewBindings.findChildViewById(rootView, id);
      if (robotForwardButton == null) {
        break missingId;
      }

      id = R.id.robot_stop_button;
      ToggleButton robotStopButton = ViewBindings.findChildViewById(rootView, id);
      if (robotStopButton == null) {
        break missingId;
      }

      id = R.id.tank_in_button;
      ToggleButton tankInButton = ViewBindings.findChildViewById(rootView, id);
      if (tankInButton == null) {
        break missingId;
      }

      id = R.id.tank_out_button;
      ToggleButton tankOutButton = ViewBindings.findChildViewById(rootView, id);
      if (tankOutButton == null) {
        break missingId;
      }

      id = R.id.tank_stop_button;
      ToggleButton tankStopButton = ViewBindings.findChildViewById(rootView, id);
      if (tankStopButton == null) {
        break missingId;
      }

      id = R.id.vacuum_button;
      LabeledSwitch vacuumButton = ViewBindings.findChildViewById(rootView, id);
      if (vacuumButton == null) {
        break missingId;
      }

      id = R.id.vacuum_in_button;
      ToggleButton vacuumInButton = ViewBindings.findChildViewById(rootView, id);
      if (vacuumInButton == null) {
        break missingId;
      }

      id = R.id.vacuum_out_button;
      ToggleButton vacuumOutButton = ViewBindings.findChildViewById(rootView, id);
      if (vacuumOutButton == null) {
        break missingId;
      }

      id = R.id.vacuum_pressure_gauge;
      SpeedView vacuumPressureGauge = ViewBindings.findChildViewById(rootView, id);
      if (vacuumPressureGauge == null) {
        break missingId;
      }

      id = R.id.vacuum_stop_button;
      ToggleButton vacuumStopButton = ViewBindings.findChildViewById(rootView, id);
      if (vacuumStopButton == null) {
        break missingId;
      }

      id = R.id.water_button;
      LabeledSwitch waterButton = ViewBindings.findChildViewById(rootView, id);
      if (waterButton == null) {
        break missingId;
      }

      id = R.id.water_in_button;
      ToggleButton waterInButton = ViewBindings.findChildViewById(rootView, id);
      if (waterInButton == null) {
        break missingId;
      }

      id = R.id.water_out_button;
      ToggleButton waterOutButton = ViewBindings.findChildViewById(rootView, id);
      if (waterOutButton == null) {
        break missingId;
      }

      id = R.id.water_pressure_gauge;
      SpeedView waterPressureGauge = ViewBindings.findChildViewById(rootView, id);
      if (waterPressureGauge == null) {
        break missingId;
      }

      id = R.id.water_stop_button;
      ToggleButton waterStopButton = ViewBindings.findChildViewById(rootView, id);
      if (waterStopButton == null) {
        break missingId;
      }

      return new FragmentManualBinding((FrameLayout) rootView, armDownButton, armUpButton,
          homeButton, manualBody, manualTitle, pipeDownButton, pipeUpButton, robotBackwardButton,
          robotForwardButton, robotStopButton, tankInButton, tankOutButton, tankStopButton,
          vacuumButton, vacuumInButton, vacuumOutButton, vacuumPressureGauge, vacuumStopButton,
          waterButton, waterInButton, waterOutButton, waterPressureGauge, waterStopButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
