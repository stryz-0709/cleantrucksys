// Generated by view binder compiler. Do not edit!
package com.aasolution.cleantrucksys.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.ToggleButton;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.aasolution.cleantrucksys.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentProcessA1Binding implements ViewBinding {
  @NonNull
  private final FrameLayout rootView;

  @NonNull
  public final ConstraintLayout ConstraintLayout;

  @NonNull
  public final RelativeLayout backButton;

  @NonNull
  public final CardView bottomCard;

  @NonNull
  public final CardView endCard;

  @NonNull
  public final ImageView imageView;

  @NonNull
  public final ToggleButton oilLight;

  @NonNull
  public final Button startProcess;

  @NonNull
  public final TextView state;

  @NonNull
  public final TextView stateTitle;

  @NonNull
  public final Button stopProcess;

  @NonNull
  public final TextView title;

  @NonNull
  public final RelativeLayout titleLayout;

  @NonNull
  public final ToggleButton vacuumLight;

  @NonNull
  public final ToggleButton valve2Light;

  @NonNull
  public final ToggleButton valve3Light;

  @NonNull
  public final ToggleButton valve4Light;

  @NonNull
  public final ToggleButton valve6Light;

  @NonNull
  public final ToggleButton valve9Light;

  @NonNull
  public final RelativeLayout zoomInButton;

  @NonNull
  public final RelativeLayout zoomOutButton;

  private FragmentProcessA1Binding(@NonNull FrameLayout rootView,
      @NonNull ConstraintLayout ConstraintLayout, @NonNull RelativeLayout backButton,
      @NonNull CardView bottomCard, @NonNull CardView endCard, @NonNull ImageView imageView,
      @NonNull ToggleButton oilLight, @NonNull Button startProcess, @NonNull TextView state,
      @NonNull TextView stateTitle, @NonNull Button stopProcess, @NonNull TextView title,
      @NonNull RelativeLayout titleLayout, @NonNull ToggleButton vacuumLight,
      @NonNull ToggleButton valve2Light, @NonNull ToggleButton valve3Light,
      @NonNull ToggleButton valve4Light, @NonNull ToggleButton valve6Light,
      @NonNull ToggleButton valve9Light, @NonNull RelativeLayout zoomInButton,
      @NonNull RelativeLayout zoomOutButton) {
    this.rootView = rootView;
    this.ConstraintLayout = ConstraintLayout;
    this.backButton = backButton;
    this.bottomCard = bottomCard;
    this.endCard = endCard;
    this.imageView = imageView;
    this.oilLight = oilLight;
    this.startProcess = startProcess;
    this.state = state;
    this.stateTitle = stateTitle;
    this.stopProcess = stopProcess;
    this.title = title;
    this.titleLayout = titleLayout;
    this.vacuumLight = vacuumLight;
    this.valve2Light = valve2Light;
    this.valve3Light = valve3Light;
    this.valve4Light = valve4Light;
    this.valve6Light = valve6Light;
    this.valve9Light = valve9Light;
    this.zoomInButton = zoomInButton;
    this.zoomOutButton = zoomOutButton;
  }

  @Override
  @NonNull
  public FrameLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentProcessA1Binding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentProcessA1Binding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_process_a1, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentProcessA1Binding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.ConstraintLayout;
      ConstraintLayout ConstraintLayout = ViewBindings.findChildViewById(rootView, id);
      if (ConstraintLayout == null) {
        break missingId;
      }

      id = R.id.backButton;
      RelativeLayout backButton = ViewBindings.findChildViewById(rootView, id);
      if (backButton == null) {
        break missingId;
      }

      id = R.id.bottomCard;
      CardView bottomCard = ViewBindings.findChildViewById(rootView, id);
      if (bottomCard == null) {
        break missingId;
      }

      id = R.id.endCard;
      CardView endCard = ViewBindings.findChildViewById(rootView, id);
      if (endCard == null) {
        break missingId;
      }

      id = R.id.imageView;
      ImageView imageView = ViewBindings.findChildViewById(rootView, id);
      if (imageView == null) {
        break missingId;
      }

      id = R.id.oil_light;
      ToggleButton oilLight = ViewBindings.findChildViewById(rootView, id);
      if (oilLight == null) {
        break missingId;
      }

      id = R.id.start_process;
      Button startProcess = ViewBindings.findChildViewById(rootView, id);
      if (startProcess == null) {
        break missingId;
      }

      id = R.id.state;
      TextView state = ViewBindings.findChildViewById(rootView, id);
      if (state == null) {
        break missingId;
      }

      id = R.id.state_title;
      TextView stateTitle = ViewBindings.findChildViewById(rootView, id);
      if (stateTitle == null) {
        break missingId;
      }

      id = R.id.stop_process;
      Button stopProcess = ViewBindings.findChildViewById(rootView, id);
      if (stopProcess == null) {
        break missingId;
      }

      id = R.id.title;
      TextView title = ViewBindings.findChildViewById(rootView, id);
      if (title == null) {
        break missingId;
      }

      id = R.id.title_layout;
      RelativeLayout titleLayout = ViewBindings.findChildViewById(rootView, id);
      if (titleLayout == null) {
        break missingId;
      }

      id = R.id.vacuum_light;
      ToggleButton vacuumLight = ViewBindings.findChildViewById(rootView, id);
      if (vacuumLight == null) {
        break missingId;
      }

      id = R.id.valve2_light;
      ToggleButton valve2Light = ViewBindings.findChildViewById(rootView, id);
      if (valve2Light == null) {
        break missingId;
      }

      id = R.id.valve3_light;
      ToggleButton valve3Light = ViewBindings.findChildViewById(rootView, id);
      if (valve3Light == null) {
        break missingId;
      }

      id = R.id.valve4_light;
      ToggleButton valve4Light = ViewBindings.findChildViewById(rootView, id);
      if (valve4Light == null) {
        break missingId;
      }

      id = R.id.valve6_light;
      ToggleButton valve6Light = ViewBindings.findChildViewById(rootView, id);
      if (valve6Light == null) {
        break missingId;
      }

      id = R.id.valve9_light;
      ToggleButton valve9Light = ViewBindings.findChildViewById(rootView, id);
      if (valve9Light == null) {
        break missingId;
      }

      id = R.id.zoom_in_button;
      RelativeLayout zoomInButton = ViewBindings.findChildViewById(rootView, id);
      if (zoomInButton == null) {
        break missingId;
      }

      id = R.id.zoom_out_button;
      RelativeLayout zoomOutButton = ViewBindings.findChildViewById(rootView, id);
      if (zoomOutButton == null) {
        break missingId;
      }

      return new FragmentProcessA1Binding((FrameLayout) rootView, ConstraintLayout, backButton,
          bottomCard, endCard, imageView, oilLight, startProcess, state, stateTitle, stopProcess,
          title, titleLayout, vacuumLight, valve2Light, valve3Light, valve4Light, valve6Light,
          valve9Light, zoomInButton, zoomOutButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
